% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/calibration.R
\name{mk_calibrate}
\alias{mk_calibrate}
\title{Add calibration information to a simulator}
\usage{
mk_calibrate(
  sim,
  params = list(),
  transforms = list(),
  data = NULL,
  start_time = NULL,
  end_time = NULL,
  exprs = list(),
  debug = FALSE,
  clamp_vars = FALSE
)
}
\arguments{
\item{sim}{A \code{macpan2} simulator (i.e., a \code{TMBSimulator} object).}

\item{params}{a list of parameters with default/starting values.}

\item{transforms}{TODO.}

\item{data}{A data frame containing data to add (i.e., observed variables that will be compared with simulations). If the data frame contains a column called "time" or "date" (any capitalization), it will be used.}

\item{start_time}{A time or date, overriding first time in data; set to 1 otherwise.}

\item{end_time}{A time or date, overriding last time in data; set to number of time steps otherwise.}

\item{exprs}{A list of expressions to add.}

\item{debug}{(logical) Print debugging information?}

\item{clamp_vars}{(logical) Force state variables to be positive in likelihood expression?}
}
\value{
This function modifies the simulator object \strong{in place}. It also returns (invisibly) a character vector of the lower-level operations it performs.
}
\description{
\subsection{To do/FIXME}{
\itemize{
\item see hacks for getting simulation variables, state variables
\item modularize?
\item switch for enabling a differenced/incidence class (add a flow/accumulator var to model; add a differencing step)?
\item allow setting clamp tolerance? allow specified list of variables to clamp rather than all or nothing
\item rename and move into macpan2
\item document that 'log-likelihood' means -1*(loss function) (e.g. for SSQ, chi-squared fits)
}
}
}
\examples{
## it's convenient to have a function that sets up a fresh simulation
## (since adding already-existing components to a simulation object throws an error)
library(dplyr)
setup_sim <- function() {
  m <- Compartmental(system.file("starter_models", "sir", package = "macpan2"))
  sim <- m$simulators$tmb(
   time_steps = 100,
   state = c(S = 99, I = 1, R = 0),
   flow = c(foi = NA, gamma = 0.1),
   beta = 0.2,
   N = empty_matrix
 )
}
sim <- setup_sim()
if (require(outbreaks)) {
     I_obs <- influenza_england_1978_school[["in_bed"]]
} else {
  set.seed(101)
  I_obs <- (sim$report(.phases = "during")
     |> filter(row == "I")
    |> mutate(obs = rnbinom(100, mu = value, size = 2))
    |> pull(obs)
  )
}
m1 <- mk_calibrate(sim,
    data = data.frame(I_obs),
    params = list(beta = 0.2, I_sd = 1),
    transforms = list(beta = "log", I_sd = "log"),
    exprs = list(log_lik ~ dnorm(I_obs, I, I_sd)),
)
cat(m1, sep = "\n")
sim$optimize$nlminb()
sim <- setup_sim()  ## refresh
mk_calibrate(sim,
    data = data.frame(I_obs),
    params = list(beta = 0.2, gamma = 0.05),
    transforms = list(beta = "log", gamma = "log"),
    exprs = list(log_lik ~ dpois(I_obs, I))
)
sim$optimize$nlminb()
## warning about NA/NaN function evaluation is probably harmless ...
}
