% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tmb_model.R
\name{TMBModel}
\alias{TMBModel}
\title{TMB Model}
\usage{
TMBModel(
  init_mats = MatsList(),
  expr_list = ExprList(),
  params = OptParamsList(0),
  random = OptParamsList(),
  obj_fn = ObjectiveFunction(~0),
  time_steps = Time(0L),
  meth_list = MethList(),
  const_int_vecs = ConstIntVecs(),
  log_file = LogFile()
)
}
\arguments{
\item{init_mats}{An object of class \code{\link{MatsList}}.}

\item{expr_list}{An object of class \code{\link{ExprList}}.}

\item{params}{An object of class \code{\link{OptParamsList}}.}

\item{random}{An object of class \code{\link{OptParamsList}}.}

\item{obj_fn}{An object of class \code{\link{ObjectiveFunction}}.}

\item{time_steps}{An object of class \code{\link{Time}}.}

\item{meth_list}{An object of class \code{\link{MethList}}.}

\item{const_int_vecs}{An object of class \code{\link{ConstIntVecs}}.}

\item{log_file}{An object of class \code{\link{LogFile}}.}
}
\value{
Object of class \code{TMBModel} with the following methods.
\subsection{Methods}{
\itemize{
\item \verb{$data_arg()} -- Return all of the components of the data structure
to pass to C++.
\item \verb{$param_arg()} -- Return all of the components of the parameter list
to pass to C++.
\item \verb{$simulator()} -- Return an object of class \code{\link{TMBSimulator}},
which can be used to simulate data from the model.
}
}
}
\description{
Define a compartmental model in TMB. This model uses the spec
\url{https://canmod.net/misc/cpp_side}.
}
\examples{
sir = TMBModel(
  init_mats = MatsList(
    state = c(1 - 1e-2, 1e-2, 0),
    beta = 0.3,
    gamma = 0.2,
    N = 1,
    foi = 0,
    ratemat = matrix(0, 3, 3),
    flowmat = matrix(0, 3, 3),
    .mats_to_save = c("state", "N", "foi"),
    .mats_to_return = c("state", "N", "foi")
  ),
  expr_list = ExprList(
    before = list(
      N ~ sum(state)
    ),
    during = list(
      foi ~ beta * state[1, 0] / N,
      ratemat ~ matrix(c(
        0,   0,     0,
        foi, 0,     0,
        0,   gamma, 0), 3, 3),
      flowmat ~ ratemat * state,
      state ~ state - rowSums(flowmat) + t(colSums(flowmat))
    )
  ),
  params = OptParamsList(0.3
    , par_id = 0L
    , mat = "beta"
    , row_id = 0L
    , col_id = 0L
  ),
  random = OptParamsList(),
  obj_fn = ObjectiveFunction(~ foi + 1),
  time_steps = Time(time_steps = 30L)
)
sir$data_arg()
sir$param_arg()
sir$simulator()$report()

}
