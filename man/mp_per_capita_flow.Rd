% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/formula_list_generators.R
\name{mp_per_capita_flow}
\alias{mp_per_capita_flow}
\alias{mp_per_capita_inflow}
\alias{mp_per_capita_outflow}
\alias{mp_absolute_flow}
\title{Specify Flow Between Compartments}
\usage{
mp_per_capita_flow(from, to, rate, abs_rate = NULL)

mp_per_capita_inflow(from, to, rate, abs_rate = NULL)

mp_per_capita_outflow(from, rate, abs_rate = NULL)

mp_absolute_flow(from, to, rate, rate_name = NULL)
}
\arguments{
\item{from}{String giving the name of the compartment from which the flow
originates.}

\item{to}{String giving the name of the compartment to which the flow is
going.}

\item{rate}{String giving the expression for the per-capita or absolute
flow rate. Alternatively for per-capita flows, and for back compatibility,
a two-sided formula with the left-hand-side giving the name of the absolute
flow rate per unit time-stepand the right-hand-side giving an expression for
the per-capita rate of flow from \code{from} to \code{to}.}

\item{abs_rate}{String giving the name for the absolute flow rate.
By default, during simulations, the absolute flow rate will be computed as
\code{from * rate}. This default behaviour will simulate the compartmental model
as discrete difference equations, but this default can be changed to use
other approaches (see \code{\link{state_updates}}).
If a formula is passed to \code{rate} (not recommended for better readability),
then this \code{abs_rate} argument will be ignored.}

\item{rate_name}{String giving the name for the absolute flow rate.}
}
\description{
Specify different kinds of flows between compartments.
}
\details{
The examples below can be mixed and matched in \code{mp_tmb_model_spec()}
to produce compartmental models. Note that the symbols used below must
be used in an appropriate context (e.g., if \code{N} is used for total population
size, then there must be an expression like \code{N ~ S + I + R} somewhere in
the model or for models with constant population size there must be a
default variable, \code{N}, with a numerical value).
}
\section{Functions}{
\itemize{
\item \code{mp_per_capita_inflow()}: Only flow into the \code{to} compartment, and
do not flow out of the \code{from} compartment. The \code{from} compartment can even
be a function of a set of compartments, because it will not be updated. A
common construction is \code{mp_per_capita_inflow("N", "S", "birth_rate", "birth")}
for adding a birth process, which involves the total population size, \code{N},
rather than a single compartment.

\item \code{mp_per_capita_outflow()}: Only flow out of the \code{from} compartment,
without going anywhere. This is useful for removing individuals from the
system (e.g., death). To keep track of the total number of dead individuals
one can use \code{mp_per_capita_flow} and set \code{to} to be a compartment for
these individuals (e.g., \code{to = "D"}).

\item \code{mp_absolute_flow()}: Experimental

}}
\examples{

# infection by mass action
# https://github.com/canmod/macpan2/blob/main/inst/starter_models/si
mp_per_capita_flow("S", "I", "beta * I / N", "infection")

# recovery
# https://github.com/canmod/macpan2/blob/main/inst/starter_models/sir
mp_per_capita_flow("I", "R", "gamma", "recovery")

# disease progression with different severity
# https://github.com/canmod/macpan2/blob/main/inst/starter_models/macpan_base
mp_per_capita_flow("E", "I_mild", "alpha * phi"      , "progression_mild")
mp_per_capita_flow("E", "I_sev" , "alpha * (1 - phi)", "progression_sev")

# birth
# https://github.com/canmod/macpan2/blob/main/inst/starter_models/sir_demog
mp_per_capita_inflow("N", "S", "nu", "birth")

# death
# https://github.com/canmod/macpan2/blob/main/inst/starter_models/sir_demog
mp_per_capita_outflow("S", "mu", "death_S")
mp_per_capita_outflow("I", "mu", "death_I")
mp_per_capita_outflow("R", "mu", "death_R")

# vaccination 
# https://github.com/canmod/macpan2/blob/main/inst/starter_models/shiver
mp_per_capita_flow("S", "V", "((a * S)/(b + S))/S",  "vaccination")

# importation (experimental)
# mp_absolute_inflow("I", "delta", "importation")

}
