% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/formula_list_generators.R
\name{state_updates}
\alias{state_updates}
\alias{mp_euler}
\alias{mp_rk4}
\alias{mp_rk4_old}
\alias{mp_euler_multinomial}
\alias{mp_hazard}
\title{Change How State Variables are Updated}
\usage{
mp_euler(model)

mp_rk4(model)

mp_rk4_old(model)

mp_euler_multinomial(model)

mp_hazard(model)
}
\arguments{
\item{model}{Object with quantities that have been explicitly
marked as state variables.}
}
\description{
These functions return a modified version of a model specification, such
that the state variables are updated each time step according to different
numerical methods.
}
\details{
By choosing one of these functions, one is able to convert

To see the computations that update the state variables under these
modified specifications, one may use the
\code{\link{mp_expand}} function (see examples).

The default update method for model specifications produced using
\code{\link{mp_tmb_model_spec}} is \code{mp_euler}. This update method
yields a difference-equation model where the state is updated once
per time-step using the absolute flow rate as the difference between
steps.
}
\section{Functions}{
\itemize{
\item \code{mp_euler()}: ODE solver using the Euler method, which is
equivalent to treating the model as a set of discrete-time difference
equations. This is the default method used by
\code{\link{mp_tmb_model_spec}}, but this default can be changed using
the functions described below.

\item \code{mp_rk4()}: ODE solver using Runge-Kutta 4. Any formulas that
appear before model flows in the \code{during} list will only be updated
with RK4 if they do contain functions in
\code{getOption("macpan2_non_iterable_funcs")} and if they do not make any
state variable assignments (i.e., the left-hand-side does not contain
state variables). Each formula that does not meet these conditions will
be evaluated only once at each time-step before the other three RK4
iterations are taken. By default, the \code{time_var} function and functions
that generate random numbers (e.g., \code{rbinom}) are not iterable. Functions
that generate random numbers will only be called once with state update
methods that do not repeat expressions more than once per time-step
(e.g., \code{\link{mp_euler}}), and so repeating these functions with RK4
could make it difficult to compare methods. If you really do want to
regenerate random numbers at each RK4 iteration, you can do so by setting
the above option appropriately. The \code{time_var} function assumes that it
will only be called once per time-step, and so it should never be removed
from the list of non-iterable functions. Although in principle it could
make sense to update state variables manually, it currently causes us to
be confused. We therefore require that all state variable updates are set
explicitly (e.g., with \code{\link{mp_per_capita_flow}}).

\item \code{mp_rk4_old()}: Old version of \code{mp_rk4} that doesn't keep track
of absolute flows through each time-step. As a result this version is
more efficient but makes it more difficult to compute things like
incidence over a time scale.

\item \code{mp_euler_multinomial()}: Update state with process error given by the
Euler-multinomial distribution.

\item \code{mp_hazard()}: Update state with hazard steps, which is equivalent
to taking the step given by the expected value of the Euler-multinomial
distribution.

}}
\examples{
sir = mp_tmb_library("starter_models", "sir", package = "macpan2")
sir
sir |> mp_euler()             |> mp_expand()
sir |> mp_rk4()               |> mp_expand()
sir |> mp_euler_multinomial() |> mp_expand()

}
